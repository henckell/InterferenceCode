var_ols3 <- matrix(nrow=1, ncol=length(nvals))
var_ols4 <- matrix(nrow=1, ncol=length(nvals))
var.est_ols1 <- matrix(nrow=1, ncol=length(nvals))
var.est_ols2 <- matrix(nrow=1, ncol=length(nvals))
var.est_ols3 <- matrix(nrow=1, ncol=length(nvals))
var.est_ols4 <- matrix(nrow=1, ncol=length(nvals))
var.var.est_ols1 <- matrix(nrow=1, ncol=length(nvals))
var.var.est_ols2 <- matrix(nrow=1, ncol=length(nvals))
var.var.est_ols3 <- matrix(nrow=1, ncol=length(nvals))
var.var.est_ols4 <- matrix(nrow=1, ncol=length(nvals))
Ressqrt(mean((unname(Res[[i]][which(names(unlist(Res[[i]]))=="est_OLS4")])-tau[[i]])^2, na.rm=T))
sqrt(mean((unname(Res[[i]][which(names(unlist(Res[[i]]))=="est_OLS4")])-tau[[i]])^2, na.rm=T))
i
unname(Res[[i]][which(names(unlist(Res[[i]]))=="est_OLS4")])
mean(unname(Res[[i]][which(names(unlist(Res[[i]]))=="est_OLS4")]))
omega <- omega_comp(pai, eta, feat_functions,A,B)
mean((check-dat$tau)^2)
(check-dat$tau)^2
dat$tau
check
sqrt(mean((check-dat$tau)^2))
mean(check)
dat$tau
check - dat$tau
mean(check - dat$tau)
var(check - dat$tau)
(check - dat$tau)^2
mean((check - dat$tau)^2)
sqrt(mean((check - dat$tau)^2))
sqrt(mean((check-dat$tau)^2))
nval <- nval.eff <- 1200
typeofgraph <- "rand_npfix"
pai <- 0.7
eta <- 0.2
features <- c(1)
error.type_C <- "rnorm"
error.type_Y <- "runif"  #, "rnorm", "rt", "runif", "chisq"
growth.rate <- 2/3
do.intervene <- c()
prob <- 0.2
prob.rewiring <- 0.05
delta_Y <- 0
sigma_Y <- 1
const <- 10
growth.rate.WS <- 1/4
B_C <- t(matrix(c(0,0,0,
2,0,0,
0,0,0),nrow=3))
delta_C <- c(-2,0,0.5)
gamma_C <- c(1.5,0,0)
sigma_C <- c(1,1,1)
eta_C <-  c(0,1,5)
beta_0 = c(2, 1, 0.5)
beta_1 = c(2.4, 2.1, 1.0)
adj <- c(2)
beta <- cbind(beta_0,beta_1)
nval <- nval.eff <- 1200
if(typeofgraph != "2dlatt"){
if (typeofgraph=="chain"){
A <- A_chain_graph(nval)
A <- Matrix(A, sparse = T)
} else if (typeofgraph=="ring"){
A <- A_ring_graph(nval)
A <- Matrix(A, sparse = T)
} else if (typeofgraph=="2dlatt"){
A <- A_2_d_lattice(nval)
} else if (typeofgraph=="3dlatt"){
A <- A_3_d_lattice(nval, usedirect=TRUE)
} else if (typeofgraph=="rand_pfix"){
A <- A_random_graph(nval, prob)
A <- Matrix(A, sparse = T)
} else if (typeofgraph=="rand_npfix"){
A <- A_random_graph(nval, const/nval)
A <- Matrix(A, sparse = T)
} else if (typeofgraph=="rand_npfix_growing"){
A <- A_random_graph(nval, nval^(-growth.rate))
A <- Matrix(A, sparse = T)
} else if (typeofgraph=="WS"){
mean.degree <- const
A <- A_Watts_Strogatz(nval, prob.rewiring, mean.degree)
} else if (typeofgraph=="WS_growing"){
mean.degree <- const*nval^(growth.rate.WS)
A <- A_Watts_Strogatz(nval, prob.rewiring, mean.degree)
} else if (typeofgraph=="family"){
A <- A_family_graph(nval)
} else {print("graph type not known")}
}
check <- c()
for(i in 1:50){
dat <- data_gen(A,beta,
B_C,eta_C,gamma_C,delta_C,sigma_C,
delta_Y,sigma_Y,
typeofgraph,
features,
nval,
error.type,
do.intervene)
check[i] <- estimator(pai, eta, W=dat$treat,Y=dat$Y,C=dat$C,adj=c(2),feat_functions=list(feat_X1),A,B=50)
}
check
sqrt(mean((check-dat$tau)^2))
dat$tau
mean(check)
var(check)
design <- rbind(X,W,W*X,C[,adj])
design <- cbind(X,W,W*X,C[,adj])
design
design <- cbind(1,X,W,W*X,C[,adj])
design
X <- do.call(cbind,lapply(feat_functions, FUN = function(f){
f(A,W)}))
design <- cbind(1,X,W,W*X,C[,adj])
alpha_full <- lm(Y~X+W+W*X+C[,adj])$coef
alpha <- alpha_full[c(1:(2+length(feat_functions)),
((3+length(feat_functions)+length(adj)):(2+2*length(feat_functions)+length(adj))))]
beta <- reparam_coefs(alpha)
estimate<- omega$omega_1%*%beta$beta_hat_1 +
omega$omega_0%*%beta$beta_hat_0
var_estimate <- sandwich.var.est(Z=design, Y=Y, alpha.hat=alpha_full,
omega_0=omega$omega_0,
omega_1=omega$omega_1, adj=adj)
var_estimate
typeofgraph <- "rand_npfix"
pai <- 0.7
eta <- 0.2
features <- c(1)
error.type_C <- "rnorm"
error.type_Y <- "runif"  #, "rnorm", "rt", "runif", "chisq"
growth.rate <- 2/3
do.intervene <- c()
prob <- 0.2
prob.rewiring <- 0.05
delta_Y <- 0
sigma_Y <- 1
const <- 10
growth.rate.WS <- 1/4
B_C <- t(matrix(c(0,0,0,
2,0,0,
0,0,0),nrow=3))
delta_C <- c(-2,0,0.5)
gamma_C <- c(1.5,0,0)
sigma_C <- c(1,1,1)
eta_C <-  c(0,1,5)
beta_0 = c(2, 1, 0.5)
beta_1 = c(2.4, 2.1, 1.0)
adj <- c(2)
beta <- cbind(beta_0,beta_1)
nval <- nval.eff <- 1200
if(typeofgraph != "2dlatt"){
if (typeofgraph=="chain"){
A <- A_chain_graph(nval)
A <- Matrix(A, sparse = T)
} else if (typeofgraph=="ring"){
A <- A_ring_graph(nval)
A <- Matrix(A, sparse = T)
} else if (typeofgraph=="2dlatt"){
A <- A_2_d_lattice(nval)
} else if (typeofgraph=="3dlatt"){
A <- A_3_d_lattice(nval, usedirect=TRUE)
} else if (typeofgraph=="rand_pfix"){
A <- A_random_graph(nval, prob)
A <- Matrix(A, sparse = T)
} else if (typeofgraph=="rand_npfix"){
A <- A_random_graph(nval, const/nval)
A <- Matrix(A, sparse = T)
} else if (typeofgraph=="rand_npfix_growing"){
A <- A_random_graph(nval, nval^(-growth.rate))
A <- Matrix(A, sparse = T)
} else if (typeofgraph=="WS"){
mean.degree <- const
A <- A_Watts_Strogatz(nval, prob.rewiring, mean.degree)
} else if (typeofgraph=="WS_growing"){
mean.degree <- const*nval^(growth.rate.WS)
A <- A_Watts_Strogatz(nval, prob.rewiring, mean.degree)
} else if (typeofgraph=="family"){
A <- A_family_graph(nval)
} else {print("graph type not known")}
}
check <- c()
omega <- omega_comp(pai, eta, feat_functions,A,B)
X <- do.call(cbind,lapply(feat_functions, FUN = function(f){
f(A,W)}))
design <- cbind(1,X,W,W*X,C[,adj])
X <- do.call(cbind,lapply(feat_functions, FUN = function(f){
f(A,W)}))
W=dat$treat
Y=dat$Y
C=dat$C
X <- do.call(cbind,lapply(feat_functions, FUN = function(f){
f(A,W)}))
design <- cbind(1,X,W,W*X,C[,adj])
alpha_full <- lm(Y~X+W+W*X+C[,adj])$coef
alpha <- alpha_full[c(1:(2+length(feat_functions)),
((3+length(feat_functions)+length(adj)):(2+2*length(feat_functions)+length(adj))))]
beta <- reparam_coefs(alpha)
estimate<- omega$omega_1%*%beta$beta_hat_1 +
omega$omega_0%*%beta$beta_hat_0
var_estimate <- sandwich.var.est(Z=design, Y=Y, alpha.hat=alpha_full,
omega_0=omega$omega_0,
omega_1=omega$omega_1, adj=adj)
var_estimate
estimate
estimator <- function(pai, eta, W,Y,C,adj,feat_functions,A,B=100){
omega <- omega_comp(pai, eta, feat_functions,A,B)
X <- do.call(cbind,lapply(feat_functions, FUN = function(f){
f(A,W)}))
design <- cbind(1,X,W,W*X,C[,adj])
alpha_full <- lm(Y~X+W+W*X+C[,adj])$coef
alpha <- alpha_full[c(1:(2+length(feat_functions)),
((3+length(feat_functions)+length(adj)):(2+2*length(feat_functions)+length(adj))))]
beta <- reparam_coefs(alpha)
estimate<- omega$omega_1%*%beta$beta_hat_1 +
omega$omega_0%*%beta$beta_hat_0
var_estimate <- sandwich.var.est(Z=design, Y=Y, alpha.hat=alpha_full,
omega_0=omega$omega_0,
omega_1=omega$omega_1, adj=adj)
return(list(hat_tau=estimate,hat_var_tau=var_estimate))
}
res <- estimator(pai, eta, W=dat$treat,Y=dat$Y,C=dat$C,adj=c(2),feat_functions=list(feat_X1),A,B=50)
res$hat_tau
res$hat_var_tau
for(i in 1:50){
dat <- data_gen(A,beta,
B_C,eta_C,gamma_C,delta_C,sigma_C,
delta_Y,sigma_Y,
typeofgraph,
features,
nval,
error.type,
do.intervene)
res <- estimator(pai, eta, W=dat$treat,Y=dat$Y,C=dat$C,adj=c(2),feat_functions=list(feat_X1),A,B=50)
check_hat_tau[i] <- res$hat_tau
check_var_hat_tau[i] <- res$hat_var_tau
}
beta <- cbind(beta_0,beta_1)
check_hat_tau <- c()
check_var_hat_tau <- c()
for(i in 1:50){
dat <- data_gen(A,beta,
B_C,eta_C,gamma_C,delta_C,sigma_C,
delta_Y,sigma_Y,
typeofgraph,
features,
nval,
error.type,
do.intervene)
res <- estimator(pai, eta, W=dat$treat,Y=dat$Y,C=dat$C,adj=c(2),feat_functions=list(feat_X1),A,B=50)
check_hat_tau[i] <- res$hat_tau
check_var_hat_tau[i] <- res$hat_var_tau
}
check_hat_tau
sqrt(mean((check_hat_tau-dat$tau)^2))
check_var_hat_tau
var(check_hat_tau)
var(check_hat_tau*n)
var(check_hat_tau*)*n
var(check_hat_tau)*nval
var(check_hat_tau)*nval - mean(check_var_hat_tau)
mean(check_var_hat_tau)
Z=design
alpha.hat=alpha_full
Y=Y
omega_0=omega$omega_0
omega_1=omega$omega_1
eps.diag.mat <- diag(c(Y - Z%*%alpha.hat)^2)
eps.diag.mat
n <- nrow(Z)
p <- ncol(Z)
bread <- 1/n*t(Z)%*%Z
meat <- 1/n*t(Z)%*%eps.diag.mat%*%Z
alpha.hat.var <- solve(bread)%*%meat%*%solve(bread)
var.coef.mat <- c(omega_0+omega_1,
omega_1,
rep(0, length(adj)))
ar.coef.mat
var.coef.mat
omega_0
omega_1
var.est.tau <- as.numeric(t(var.coef.mat)%*%alpha.hat.var%*%var.coef.mat)
var.est.tau
alpha.hat.var
typeofgraph <-  "rand_npfix"
nvals <- c(300,600,1200,2400,4800)
filename.save <- paste0("plot_",typeofgraph)
tau <- list()
Res <- list()
for(i in 1:length(nvals)){
nval <- nvals[i]
filename <- paste0("results_data/model_", typeofgraph,"/estimation_",typeofgraph,"_nval",nval,".Rda")
load(filename)
Results <- unlist(Results, recursive=FALSE)
taus <- unlist(do.call(rbind, Results)[,"tau"])
tau[[i]] <- taus
Res[[i]] <- unlist(Results)
rm(Results)
print(paste0("nval: ",nvals[i]))
}
if(typeofgraph=="2dlatt"){
nvals <- c(289, 576, 1225, 2401, 4761)
}
rmse_ols1 <- matrix(nrow=1, ncol=length(nvals))
rmse_ols2 <- matrix(nrow=1, ncol=length(nvals))
rmse_ols3 <- matrix(nrow=1, ncol=length(nvals))
rmse_ols4 <- matrix(nrow=1, ncol=length(nvals))
bias_ols1 <- matrix(nrow=1, ncol=length(nvals))
bias_ols2 <- matrix(nrow=1, ncol=length(nvals))
bias_ols3 <- matrix(nrow=1, ncol=length(nvals))
bias_ols4 <- matrix(nrow=1, ncol=length(nvals))
var_ols1 <- matrix(nrow=1, ncol=length(nvals))
var_ols2 <- matrix(nrow=1, ncol=length(nvals))
var_ols3 <- matrix(nrow=1, ncol=length(nvals))
var_ols4 <- matrix(nrow=1, ncol=length(nvals))
var.est_ols1 <- matrix(nrow=1, ncol=length(nvals))
var.est_ols2 <- matrix(nrow=1, ncol=length(nvals))
var.est_ols3 <- matrix(nrow=1, ncol=length(nvals))
var.est_ols4 <- matrix(nrow=1, ncol=length(nvals))
var.var.est_ols1 <- matrix(nrow=1, ncol=length(nvals))
var.var.est_ols2 <- matrix(nrow=1, ncol=length(nvals))
var.var.est_ols3 <- matrix(nrow=1, ncol=length(nvals))
var.var.est_ols4 <- matrix(nrow=1, ncol=length(nvals))
for (i in 1:length(nvals)){
rmse_ols1[i] <- sqrt(mean((unname(Res[[i]][which(names(unlist(Res[[i]]))=="est_OLS1")])-tau[[i]])^2, na.rm=T))
rmse_ols2[i] <- sqrt(mean((unname(Res[[i]][which(names(unlist(Res[[i]]))=="est_OLS2")])-tau[[i]])^2, na.rm=T))
rmse_ols3[i] <- sqrt(mean((unname(Res[[i]][which(names(unlist(Res[[i]]))=="est_OLS3")])-tau[[i]])^2, na.rm=T))
rmse_ols4[i] <- sqrt(mean((unname(Res[[i]][which(names(unlist(Res[[i]]))=="est_OLS4")])-tau[[i]])^2, na.rm=T))
# frac_0[i] <- mean(as.numeric(unname(Res[[i]][which(names(unlist(Res[[i]]))=="num0")])))/nvals[i]
est <- as.numeric(unname(Res[[i]][which(names(unlist(Res[[i]]))=="est_OLS1")]))
bias_ols1[i] <- mean(est- tau[[i]],na.rm=TRUE)
var_ols1[i] <- var(est, na.rm=TRUE)
var.est_ols1[i] <-  1/nvals[i]*mean(Res[[i]][which(names(unlist(Res[[i]]))=="var_OLS1.est")])
var.var.est_ols1[i] <-  var(1/nvals[i]*Res[[i]][which(names(unlist(Res[[i]]))=="var_OLS1.est")])
rm(est)
est <- as.numeric(unname(Res[[i]][which(names(unlist(Res[[i]]))=="est_OLS2")]))
bias_ols2[i] <- mean(est- tau[[i]],na.rm=TRUE)
var_ols2[i] <- var(est, na.rm=TRUE)
var.est_ols2[i] <-  1/nvals[i]*mean(Res[[i]][which(names(unlist(Res[[i]]))=="var_OLS2.est")])
var.var.est_ols2[i] <-  var(1/nvals[i]*Res[[i]][which(names(unlist(Res[[i]]))=="var_OLS2.est")])
rm(est)
est <- as.numeric(unname(Res[[i]][which(names(unlist(Res[[i]]))=="est_OLS3")]))
bias_ols3[i] <- mean(est- tau[[i]],na.rm=TRUE)
var_ols3[i] <- var(est, na.rm=TRUE)
var.est_ols3[i] <- 1/nvals[i]*mean(Res[[i]][which(names(unlist(Res[[i]]))=="var_OLS3.est")])
var.var.est_ols3[i] <-  var(1/nvals[i]*Res[[i]][which(names(unlist(Res[[i]]))=="var_OLS3.est")])
rm(est)
est <- as.numeric(unname(Res[[i]][which(names(unlist(Res[[i]]))=="est_OLS4")]))
bias_ols4[i] <- mean(est- tau[[i]],na.rm=TRUE)
var_ols4[i] <- var(est, na.rm=TRUE)
var.est_ols4[i] <-  1/nvals[i]*mean(Res[[i]][which(names(unlist(Res[[i]]))=="var_OLS4.est")])
var.var.est_ols4[i] <-  var(1/nvals[i]*Res[[i]][which(names(unlist(Res[[i]]))=="var_OLS4.est")])
rm(est)}
var.est_ols4
var_ols4
1/nvals[i]*mean(Res[[i]][which(names(unlist(Res[[i]]))=="var_OLS4.est")])
Res[[i]][which(names(unlist(Res[[i]]))=="var_OLS4.est")]
i
nval
check_var_hat_tau
design <- cbind(1,X,W,W*X,C[,adj])
alpha_full <- lm(Y~X+W+W*X+C[,adj])$coef
alpha_full
alpha <- alpha_full[c(1:(2+length(feat_functions)),
((3+length(feat_functions)+length(adj)):(2+2*length(feat_functions)+length(adj))))]
alpha
alpha_full <- lm(Y~X+W+W*X+C[,adj])$coef[1:(2+2*length(feat_functions)+length(adj))]
alpha_full
alpha <- alpha_full[c(1:(2+length(feat_functions)),
((3+length(feat_functions)+length(adj)):(2+2*length(feat_functions)+length(adj))))]
alpha_full
alpha_full
lm(Y~design)
design
lm(Y~design)
alpha_full
design <- cbind(X,W,W*X,C[,adj])
alpha_full <- lm(Y~design)
alpha_full
alpha_full[1:(2+leangth(features))]
alpha_full[1:(2+length(features))]
alpha_full <- lm(Y~design)
alpha_full <- lm(Y~design)$coef
alpha_full
alpha_full[1:(2+length(features))]
length(features)
alpha_full[1:(2+2*length(features))]
design <- cbind(X,W,W*X,C[,adj])
alpha_full <- lm(Y~design)$coef
alpha <- alpha_full[1:(2+2*length(features))]
beta <- reparam_coefs(alpha)
estimate<- omega$omega_1%*%beta$beta_hat_1 +
omega$omega_0%*%beta$beta_hat_0
var_estimate <- sandwich.var.est(Z=design, Y=Y, alpha.hat=alpha_full,
omega_0=omega$omega_0,
omega_1=omega$omega_1, adj=adj)
design <- cbind(1,X,W,W*X,C[,adj])
alpha_full <- lm(Y~design-1)$coef
alpha_full
alpha <- alpha_full[1:(2+2*length(features))]
beta <- reparam_coefs(alpha)
estimate<- omega$omega_1%*%beta$beta_hat_1 +
omega$omega_0%*%beta$beta_hat_0
var_estimate <- sandwich.var.est(Z=design, Y=Y, alpha.hat=alpha_full,
omega_0=omega$omega_0,
omega_1=omega$omega_1, adj=adj)
var_estimate
estimator <- function(pai, eta, W,Y,C,adj,feat_functions,A,B=100){
omega <- omega_comp(pai, eta, feat_functions,A,B)
X <- do.call(cbind,lapply(feat_functions, FUN = function(f){
f(A,W)}))
design <- cbind(1,X,W,W*X,C[,adj])
alpha_full <- lm(Y~design-1)$coef
alpha <- alpha_full[1:(2+2*length(features))]
beta <- reparam_coefs(alpha)
estimate<- omega$omega_1%*%beta$beta_hat_1 +
omega$omega_0%*%beta$beta_hat_0
var_estimate <- sandwich.var.est(Z=design, Y=Y, alpha.hat=alpha_full,
omega_0=omega$omega_0,
omega_1=omega$omega_1, adj=adj)
return(list(hat_tau=estimate,hat_var_tau=var_estimate))
}
check_hat_tau <- c()
check_var_hat_tau <- c()
for(i in 1:50){
dat <- data_gen(A,beta,
B_C,eta_C,gamma_C,delta_C,sigma_C,
delta_Y,sigma_Y,
typeofgraph,
features,
nval,
error.type,
do.intervene)
res <- estimator(pai, eta, W=dat$treat,Y=dat$Y,C=dat$C,adj=c(2),feat_functions=list(feat_X1),A,B=50)
check_hat_tau[i] <- res$hat_tau
check_var_hat_tau[i] <- res$hat_var_tau
}
A
nval
nval <- nval.eff <- 1200
check_hat_tau <- c()
check_var_hat_tau <- c()
for(i in 1:50){
dat <- data_gen(A,beta,
B_C,eta_C,gamma_C,delta_C,sigma_C,
delta_Y,sigma_Y,
typeofgraph,
features,
nval,
error.type,
do.intervene)
res <- estimator(pai, eta, W=dat$treat,Y=dat$Y,C=dat$C,adj=c(2),feat_functions=list(feat_X1),A,B=50)
check_hat_tau[i] <- res$hat_tau
check_var_hat_tau[i] <- res$hat_var_tau
}
beta <- cbind(beta_0,beta_1)
nval <- nval.eff <- 1200
for(i in 1:50){
dat <- data_gen(A,beta,
B_C,eta_C,gamma_C,delta_C,sigma_C,
delta_Y,sigma_Y,
typeofgraph,
features,
nval,
error.type,
do.intervene)
res <- estimator(pai, eta, W=dat$treat,Y=dat$Y,C=dat$C,adj=c(2),feat_functions=list(feat_X1),A,B=50)
check_hat_tau[i] <- res$hat_tau
check_var_hat_tau[i] <- res$hat_var_tau
}
sqrt(mean((check_hat_tau-dat$tau)^2))
check_var_hat_tau
mean(check_var_hat_tau)
var(check_hat_tau)*nval
var(check_hat_tau)*nval - mean(check_var_hat_tau)
sqrt(mean((var(check_hat_tau)*nval - check_var_hat_tau)^2))
(var(check_hat_tau)*nval - check_var_hat_tau)^2
check_var_hat_tau
var(check_hat_tau)*nval
mean((var(check_hat_tau)*nval - check_var_hat_tau)^2)
sqrt(mean((var(check_hat_tau)*nval - check_var_hat_tau)^2))
sqrt(mean((var(check_hat_tau)*nval - check_var_hat_tau)^2))
setwd("~/GitHub/InvarianceCode")
source("helpers/helpers_estimator.R")
estimator <- function(pai, eta, W,Y,C,adj,feat_functions,A,B=100){
omega <- omega_comp(pai, eta, feat_functions,A,B)
X <- do.call(cbind,lapply(feat_functions, FUN = function(f){
f(A,W)}))
design <- cbind(1,X,W,W*X,C[,adj])
alpha_full <- lm(Y~design-1)$coef
alpha <- alpha_full[1:(2+2*length(features))]
beta <- reparam_coefs(alpha)
estimate<- omega$omega_1%*%beta$beta_hat_1 +
omega$omega_0%*%beta$beta_hat_0
var_estimate <- sandwich.var.est(Z=design, Y=Y, alpha.hat=alpha_full,
omega_0=omega$omega_0,
omega_1=omega$omega_1, adj=adj)
return(list(hat_tau=estimate,hat_var_tau=var_estimate))
}
source("helpers/helpers_estimator.R")
estimator <- function(pai, eta, W,Y,C,adj,feat_functions,A,B=100){
omega <- omega_comp(pai, eta, feat_functions,A,B)
X <- do.call(cbind,lapply(feat_functions, FUN = function(f){
f(A,W)}))
design <- cbind(1,X,W,W*X,C[,adj])
alpha_full <- lm(Y~design-1)$coef
alpha <- alpha_full[1:(2+2*length(features))]
beta <- reparam_coefs(alpha)
estimate<- omega$omega_1%*%beta$beta_hat_1 +
omega$omega_0%*%beta$beta_hat_0
var_estimate <- sandwich.var.est(Z=design, Y=Y, alpha.hat=alpha_full,
omega_0=omega$omega_0,
omega_1=omega$omega_1, adj=adj)
return(list(hat_tau=estimate,hat_var_tau=var_estimate))
}
